// ASSUMPTION: No two asteroids are the same size

#include <iostream>
#include <vector>

using namespace std;

enum Direction{
    Left,
    Right
};

struct Asteroid
{
    Direction direction;
    int mass;
};

//Function declarations
int countHits(vector <Asteroid> a);
vector <Asteroid> sizeTwo(Direction d1, int m1, Direction d2, int m2);
vector <Asteroid> sizeThree(Direction d1, int m1, Direction d2, int m2, Direction d3, int m3);

int main()
{
    vector <Asteroid> asteroids;
    int totalHits;
    
    //Vector size 0
    totalHits = countHits(asteroids);
    cout << totalHits << endl;
    
    //Vector size 2, Going right bigger
    asteroids = sizeTwo(Right, 8, Left, 4);
    totalHits = countHits(asteroids);
    cout << totalHits << endl;
                        
    //Vector size 2, Going left bigger
    asteroids = sizeTwo(Right, 4, Left, 8);
    totalHits = countHits(asteroids);
    cout << totalHits << endl;
    
    //Vector size 3, RLR
    asteroids = sizeThree(Right, 5, Left, 8, Right, 2);
    totalHits = countHits(asteroids);
    cout << totalHits << endl;
    
    asteroids = sizeThree(Right, 8, Left, 5, Right, 2);
    totalHits = countHits(asteroids);
    cout << totalHits << endl;
    
    //Vector size 3, RRL
    asteroids = sizeThree(Right, 5, Right, 8, Left, 10);
    totalHits = countHits(asteroids);
    cout << totalHits << endl;
    
    asteroids = sizeThree(Right, 10, Right, 4, Left, 8);
    totalHits = countHits(asteroids);
    cout << totalHits << endl;
    
    asteroids = sizeThree(Right, 10, Right, 8, Left, 4);
    totalHits = countHits(asteroids);
    cout << totalHits << endl;
    
    return 0;
}

vector <Asteroid> sizeTwo(Direction d1, int m1, Direction d2, int m2)
{
    vector <Asteroid> twoAsteroids;
    Asteroid a1;
    a1.direction = d1;
    a1.mass = m1;
    
    Asteroid a2;
    a2.direction = d2;
    a2.mass = m2;
    
    twoAsteroids.push_back(a1);
    twoAsteroids.push_back(a2);
    
    return twoAsteroids;
}

vector <Asteroid> sizeThree(Direction d1, int m1, Direction d2, int m2, Direction d3, int m3)
{
    vector <Asteroid> threeAsteroids;
    Asteroid a1;
    a1.direction = d1;
    a1.mass = m1;
    
    Asteroid a2;
    a2.direction = d2;
    a2.mass = m2;
    
    Asteroid a3;
    a3.direction = d3;
    a3.mass = m3;
    
    threeAsteroids.push_back(a1);
    threeAsteroids.push_back(a2);
    threeAsteroids.push_back(a3);
    
    return threeAsteroids;
}

int countHits(vector <Asteroid> a)
{
    int hits = 0;
    int largestMass = 0;
    vector <Asteroid> :: reverse_iterator i;
    
    for(i = a.rbegin(); i < a.rend(); i++)
    {
        if((i->direction == 1) && (i->mass > largestMass))
        {
            hits++;
        }
        else if((i->direction == 0) && (i->mass > largestMass))
        {
            largestMass = i->mass;
        }
    }
    
    return hits;
}
